package com.bridgelabz.note.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import com.bridgelabz.exception.LabelException;
import com.bridgelabz.exception.NoteException;
import com.bridgelabz.note.dto.LabelDto;
import com.bridgelabz.note.model.Label;
import com.bridgelabz.note.model.Note;
import com.bridgelabz.note.repository.LabelRepository;
import com.bridgelabz.note.repository.NoteRepository;
import com.bridgelabz.response.Response;
import com.bridgelabz.util.JWTTokenHelper;
import com.bridgelabz.util.StatusHelper;

@Service("labelService")
@PropertySource("classpath:message.properties")
@PropertySource("classpath:error.properties")
public class LabelServiceImpl implements ILabelService {

	@Autowired
	private JWTTokenHelper jwtTokenHelper;

	@Autowired
	Environment environment;

	@Autowired
	private ModelMapper modelMapper;

	@Autowired
	private NoteRepository noteRepository;

	@Autowired
	private LabelRepository labelRepository;

	@Override
	public Response createLabel(long userId, LabelDto labelDto) {
		Label label = modelMapper.map(labelDto, Label.class);
		label.setUserId(userId);
		label.setCreatedDate(LocalDate.now());
		labelRepository.save(label);
		Response response = StatusHelper.statusInfo(environment.getProperty("labelCreated"),
				Integer.parseInt(environment.getProperty("successCode")));
		return response;
	}

	@Override
	public Response updateLabel(long userId, long labelId, LabelDto labelDto) {
		Optional<Label> label = labelRepository.findByUserIdAndLabelId(userId, labelId);
		if (!label.isPresent()) {
			throw new LabelException(environment.getProperty("labelNotExist"),
					Integer.parseInt(environment.getProperty("labelExceptionCode")));
		}
		label.get().setLabelName(labelDto.getLabelName());
		label.get().setModifiedDate(LocalDate.now());
		labelRepository.save(label.get());
		Response response = StatusHelper.statusInfo(environment.getProperty("labelUpdated"),
				Integer.parseInt(environment.getProperty("successCode")));
		return response;
	}

	@Override
	public List<Label> getLabel(long userId) {
		List<Label> listLabels = labelRepository.findLabelByUserId(userId);
		return listLabels;
	}

	@Override
	public Response deleteLabel(long userId, long labelId) {
		Optional<Label> label = labelRepository.findByUserIdAndLabelId(userId, labelId);
		if (!label.isPresent()) {
			throw new LabelException(environment.getProperty("labelNotExist"),
					Integer.parseInt(environment.getProperty("labelExceptionCode")));
		}
		labelRepository.delete(label.get());
		Response response = StatusHelper.statusInfo(environment.getProperty("labelDeleted"),
				Integer.parseInt(environment.getProperty("successCode")));
		return response;
	}

	@Override
	public Response addLabelToNote(String token, long labelId, long noteId) {
		long userId = jwtTokenHelper.decodeToken(token);
		Optional<Note> note = noteRepository.findByNoteIdAndUserId(noteId, userId);
		if (!note.isPresent()) {
			throw new NoteException(environment.getProperty("notNotAvailable"),
					Integer.parseInt(environment.getProperty("noteExceptionCode")));
		}
		Optional<Label> label = labelRepository.findByUserIdAndLabelId(userId, labelId);
		if (!label.isPresent()) {
			throw new LabelException(environment.getProperty("labelNotExist"),
					Integer.parseInt(environment.getProperty("labelExceptionCode")));
		}
		if (note.get().getLabel().contains(label.get())) {
			throw new LabelException(environment.getProperty("labelAlreadyExist"),
					Integer.parseInt(environment.getProperty("labelExceptionCode")));
		}

		note.get().getLabel().add(label.get());
		label.get().getNotes().add(noteRepository.findByNoteIdAndUserId(noteId, userId).get());
		noteRepository.save(note.get());
		labelRepository.save(label.get());

		Response response = StatusHelper.statusInfo(environment.getProperty("labelAddedToNote"),
				Integer.parseInt(environment.getProperty("successCode")));
		return response;
	}

	@Override
	public Response removeLabelFromNote(String token, long labelId, long noteId) {
		long userId = jwtTokenHelper.decodeToken(token);
		Optional<Note> note = noteRepository.findByNoteIdAndUserId(noteId, userId);
		if (!note.isPresent()) {
			throw new NoteException(environment.getProperty("notNotAvailable"),
					Integer.parseInt(environment.getProperty("noteExceptionCode")));
		}
		Optional<Label> label = labelRepository.findByUserIdAndLabelId(userId, labelId);
		if (!label.isPresent()) {
			throw new LabelException(environment.getProperty("labelNotExist"),
					Integer.parseInt(environment.getProperty("labelExceptionCode")));
		}

		note.get().getLabel().remove(label.get());
		label.get().getNotes().remove(noteRepository.findByNoteIdAndUserId(noteId, userId).get());
		noteRepository.save(note.get());
		labelRepository.save(label.get());

		Response response = StatusHelper.statusInfo(environment.getProperty("labelRemovedFromNote"),
				Integer.parseInt(environment.getProperty("successCode")));
		return response;
	}

	@Override
	public List<Label> getLabelOfNote(String token, long noteId) {
		long userId = jwtTokenHelper.decodeToken(token);
		Optional<Note> note = noteRepository.findByNoteIdAndUserId(noteId, userId);
		if (!note.isPresent()) {
			throw new NoteException(environment.getProperty("notNotAvailable"),
					Integer.parseInt(environment.getProperty("noteExceptionCode")));
		}
		List<Label> label = note.get().getLabel();
		return label;
	}

}
