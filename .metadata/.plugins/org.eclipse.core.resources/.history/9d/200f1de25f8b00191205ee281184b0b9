package com.bridgelabz.note.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.bridgelabz.note.dto.CreateDto;
import com.bridgelabz.note.dto.UpdateDto;
import com.bridgelabz.note.model.Note;
import com.bridgelabz.note.service.INoteService;
import com.bridgelabz.response.Response;

@RestController
@RequestMapping("/note")
public class NoteController {

	@Autowired
	private INoteService noteService;

	@PostMapping
	public ResponseEntity<Response> createNote(HttpServletRequest request, @RequestHeader String token,
			@RequestBody CreateDto createDto) {
		long userId = Long.parseLong(request.getAttribute("userId").toString());
		System.out.println("User id : " + userId);
		Response statusResponse = noteService.createNote(createDto, userId);
		return new ResponseEntity<Response>(statusResponse, HttpStatus.OK);
	}

	@PutMapping("/{noteId}")
	public ResponseEntity<Response> updateNote(HttpServletRequest request, @RequestHeader String token,
			@RequestBody UpdateDto updateDto, @PathVariable long noteId) {
		long userId = Long.parseLong(request.getAttribute("userId").toString());
		Response statusResponse = noteService.updateNote(updateDto, userId, noteId);
		return new ResponseEntity<Response>(statusResponse, HttpStatus.OK);
	}

	@DeleteMapping("/{noteId}")
	public ResponseEntity<Response> deleteNote(HttpServletRequest request, @RequestHeader String token,
			@PathVariable long noteId) {
		long userId = Long.parseLong(request.getAttribute("userId").toString());
		Response statusResponse = noteService.deleteNote(token, noteId);
		return new ResponseEntity<Response>(statusResponse, HttpStatus.OK);
	}

	@GetMapping
	public List<Note> getAllNotes(@RequestHeader String token, @RequestParam boolean isPin,
			@RequestParam boolean isTrash, @RequestParam boolean isArchive) {
		List<Note> listNotes = noteService.getAllNote(token, isPin, isTrash, isArchive);
		return listNotes;
	}

	@PutMapping("/pinandunpin")
	public ResponseEntity<Response> pinAndUnpin(@RequestHeader String token, @RequestParam long noteId) {
		Response statusResponse = noteService.pinAndUnPin(token, noteId);
		return new ResponseEntity<Response>(statusResponse, HttpStatus.OK);
	}

	@PutMapping("/trashanduntrash")
	public ResponseEntity<Response> trashAndUntrash(@RequestHeader String token, @RequestParam long noteId) {
		Response statusResponse = noteService.trashAndUntrash(token, noteId);
		return new ResponseEntity<Response>(statusResponse, HttpStatus.OK);
	}

	@PutMapping("/archiveandunarchive")
	public ResponseEntity<Response> archiveAndUnarchive(@RequestHeader String token, @RequestParam long noteId) {
		Response statusResponse = noteService.archiveAndUnarchive(token, noteId);
		return new ResponseEntity<Response>(statusResponse, HttpStatus.OK);
	}

	@PutMapping("/addreminder")
	public ResponseEntity<Response> addReminder(@RequestHeader String token, @RequestParam long noteId,
			@RequestBody String time) {
		Response statusResponse = noteService.addReminder(token, noteId, time);
		return new ResponseEntity<Response>(statusResponse, HttpStatus.OK);
	}

	@PutMapping("/removeremainder")
	public ResponseEntity<Response> removeRemainder(@RequestHeader String token, @RequestParam long noteId) {
		Response statusResponse = noteService.removeReminder(token, noteId);
		return new ResponseEntity<Response>(statusResponse, HttpStatus.OK);
	}
}
